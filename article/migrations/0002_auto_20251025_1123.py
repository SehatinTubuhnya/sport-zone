# Generated by Django 5.2.7 on 2025-10-24 15:36

from django.db import migrations
from django.conf import settings
import json
from pathlib import Path
from django.utils import timezone
from django.utils.html import strip_tags
from datetime import datetime

def parse_indonesian_date(date_str: str):
    if not date_str:
        return None

    bulan_map = {
        "Jan": 1, "Feb": 2, "Mar": 3, "Apr": 4, "Mei": 5,
        "Jun": 6, "Jul": 7, "Agu": 8, "Sep": 9, "Okt": 10,
        "Nov": 11, "Des": 12,
    }

    try:
        # Get the main part after the comma: "05 Okt 2025 08:10 WIB"
        parts = date_str.split(",")[-1].strip()
        # Extract day, month abbreviation, and year
        day, month_abbr, year, *_ = parts.split()
        month = bulan_map.get(month_abbr, 1)

        naive_dt = datetime(int(year), month, int(day))
        # Make it timezone aware using your default timezone
        aware_dt = timezone.make_aware(naive_dt, timezone.get_default_timezone())
        return aware_dt
    except Exception as e:
        print(f"⚠️ Failed to parse date '{date_str}': {e}")
        return None

def detect_category_from_content(content: str) -> str:
    """Detect news category from the article content."""
    content_lower = content.lower()

    # Define mapping from keywords → category
    category_keywords = {
        'Rransfer': ['transfer', 'pindah', 'bergabung', 'kontrak baru'],
        'Match': ['pertandingan', 'kalah', 'menang', 'skor', 'hasil laga'],
        'Rumor': ['rumor', 'isu', 'dikabarkan', 'gosip'],
        'Analysis': ['analisis', 'strategi', 'taktik', 'evaluasi'],
        'Exclusive': ['eksklusif', 'wawancara', 'khusus untuk'],
        'Update': ['update', 'terbaru', 'hari ini'],
    }

    # Try to find the first category that matches any keyword
    for category, keywords in category_keywords.items():
        if any(keyword in content_lower for keyword in keywords):
            return category

    # Default if nothing matches
    return 'Update'

def load_news_data(apps, schema_editor):
    News = apps.get_model('article', 'News')
    CustomUser = apps.get_model('account', 'CustomUser')  # adjust app name if different

    data_path = Path(__file__).resolve().parent.parent / 'fixtures' / 'articles.json'
    if not data_path.exists():
        print(f"❌ No dataset found at {data_path}")
        return

    with open(data_path, 'r', encoding='utf-8') as file:
        data = json.load(file)

    featured_keywords = [
        "heboh", "eksklusif", "trend", "top", "keren", "ramai", "juara", "emas",
        "tak disangka", "sorot", "terbaru", "hot", "panas", "hangat", "rekor"
    ]

    # Try assigning data to fields properly
    for entry in data:
        title = entry.get("title", "Untitled")
        content = strip_tags("\n".join(entry.get("html_contents", [])))  # combine list into one text block
        thumbnail = entry.get("img_url", "")
        author_name = entry.get("author", "Anonymous")
        created_time = parse_indonesian_date(entry.get("time", None))
        tags = ", ".join(entry.get("tags", []))
        
        # Choose category dynamically or set default
        category = detect_category_from_content(content)
        sports_type = "Other"
        is_featured = any(keyword in title.lower() for keyword in featured_keywords)
        tags = entry.get("tags", [])

        # Detect sports type dynamically — look for known sports keywords
        for tag in tags:
            tag_lower = tag.lower()
            if any(keyword in tag_lower for keyword in ["bulutangkis", "badminton", "football", "basket", 
                                                        "futsal", "voli", "renang", "tenis", "motogp",
                                                        "sambo", "polo", "besi", "boxing", "pbsi", "f1",
                                                        "mma", "bela"]):
                sports_type = tag.capitalize()
                break  # stop once we find one
        
        # Optional: find a user for the author (fallback to first admin or None)
        user = CustomUser.objects.filter(is_admin=True).first()
        
        news_item = News.objects.create(
            user=user,
            username=author_name,
            title=title,
            content=content,
            category=category,
            sports_type=sports_type,
            thumbnail=thumbnail,
            news_views=0,
            is_featured=is_featured,
            created_at=created_time
        )
        news_item.created_at = created_time
        news_item.save(update_fields=['created_at'])
    
    print(f"✅ Successfully loaded {len(data)} news items.")

class Migration(migrations.Migration):
    dependencies = [
        ('article', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_news_data),
    ]